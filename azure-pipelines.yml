variables:
  - group: demo-vars

jobs:
  - job: APITestAndBuild
    displayName: API test and build
    variables:
      IMAGE_NAME: nick96/demo-api
    pool:
      vmImage: "ubuntu-16.04"
    steps:
      - script: ./gradlew test --no-daemon
        displayName: Test API
        workingDirectory: api/
      - script: ./gradlew jibDockerBuild --image=$(IMAGE_NAME) --no-daemon
        displayName: Build API docker image
        workingDirectory: api/
      - script: docker tag $(IMAGE_NAME):latest $(IMAGE_NAME):$(Build.SourceVersion)
        displayName: Tag image
      - task: Docker@2
        displayName: Log into docker hub
        inputs:
          command: login
          containerRegistry: nick96-docker-hub
      - task: Docker@2
        displayName: Push API docker image to container registry
        inputs:
          command: push
          containerRegistry: nick96-docker-hub
          repository: $(IMAGE_NAME)
          tags: $(Build.SourceVersion)
      - task: PublishBuildArtifacts@1
        displayName: Archive playbook for usage in deployment
        inputs:
          ArtifactName: playbook
          PathtoPublish: api/playbook

  - job: FrontendTestAndBuild
    displayName: Frontend test and build
    pool:
      vmImage: "ubuntu-16.04"
    steps:
      - script: yarn install && CI=1 yarn test
        displayName: Test frontend
        workingDirectory: frontend
      - script: yarn build
        displayName: Build frontend
        workingDirectory: frontend
      - task: CopyFiles@2
        inputs:
          Contents: frontend/build
          TargetFolder: '$(Build.ArtifactStagingDirectory)/build'
      - task: CopyFiles@2
        inputs:
          Contents: frontend/firebase.json
          TargetFolder: '$(Build.ArtifactStagingDirectory)' 
      - task: PublishBuildArtifacts@1
        displayName: Archive frontend artifacts
        inputs:
          ArtifactName: frontend
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/*' 

  - deployment: APIDeploy
    displayName: API deployment
    environment: api-deploy
    dependsOn: APITestAndBuild
    pool:
      vmImage: "ubuntu-16.04"
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: playbook
            displayName: Retrieve playbook
          - script: |
              ansible-playbook -v playbook.yml \
                 -i playbook/hosts \
                 --extra-vars "api_image=$(IMAGE_NAME):$(Build.SourceVersion) email=$(EMAIL)"
            displayName: Ansible deployment
            workingDirectory: '$(Pipeline.Workspace)/playbook'

  - deployment: FrontendDeploy
    displayName: Frontend deployment
    environment: frontend-deploy
    dependsOn: FrontendTestAndBuild
    pool:
      vmImage: "ubuntu-16.04"
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend
            displayName: Retrieve frontend artifacts
          - script: sudo npm install -g firebase-tools
            displayName: Install firebase CLI
          - script: sudo firebase deploy --token=$(FIREBASE_TOKEN)
            workingDirectory: '$(Pipeline.Workspace)/frontend'
            displayName: Firebase deploy
          