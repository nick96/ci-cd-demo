version: 2.1
jobs:
  test_terraform:
    docker:
      - image: golang:1.12.6
    steps:
      - checkout
      - run:
          name: Run terratest tests
          command: echo 'TODO'
          working_directory: api/terraform
      - persist_to_workspace:
          root: api
          paths:
            - terraform

  test_playbook:
    machine:
      image: ubuntu-1604:201903-01 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: echo 'TODO'
          working_directory: api/playbook
      - run: 
          name: Run molecule tests
          command: echo 'TODO'
          working_directory: api/playbook
      - persist_to_workspace:
          root: api
          paths:
            - playbook

  build_test_api:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      IMAGE_NAME: "nick96/demo-api"
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum  "api/gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "api/build.gradle" }}
      - run:
          name: Run linter
          command: ./gradlew ktlint
          working_directory: api/
      - run:
          name: Run tests
          command: ./gradlew test
          working_directory: api/
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "api/gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "api/build.gradle" }}
      - store_test_results:
          path: api/build/test-results/test
      - store_artifacts:
          path: api/build/test-results/test
      - setup_remote_docker
      - run:
          name: Build docker image
          command: ./gradlew jibDockerBuild --image "$IMAGE_NAME"
          working_directory: api/
      - run:
          name: Tag docker image
          command: docker tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:${CIRCLE_SHA1}" 
      - run:
          name: Push docker image
          command: |
            echo "$DOCKERHUB_PSW" | docker login --username "$DOCKERHUB_USR" --password-stdin
            docker push "${IMAGE_NAME}:latest"
            docker push "${IMAGE_NAME}:${CIRCLE_SHA1}"

  build_test_frontend:
    docker:
      - image: circleci/node:10.1.0 
    environment:
      CI: "1"
      IMAGE_NAME: "nick96/demo-api"
      REACT_APP_REST_URI_BASE: "https://demo.nspain.me"
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Install dependencies and test
          command: yarn install --frozen-lockfile && yarn test
          working_directory: frontend/
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Production build
          command: yarn build
          working_directory: frontend/
      - persist_to_workspace:
          root: .
          paths:
            - frontend

  deploy_infra:
    docker:
      - image: hashicorp/terraform:0.12.5
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: 
          name: Create CLI config file
          command: echo $TERRAFORM_CLI_CONFIG >~/.terraformrc
      - run:
          name: Create file with public key in known location
          command: ssh-add -L > id_rsa.pub
          working_directory: /tmp/workspace/terraform
      - run:
          name: Initialise terraform
          command: terraform init -backend-config=backend.hcl
          working_directory: /tmp/workspace/terraform
      - run:
          name: Create tf variables file
          command: |
            echo "DO_TOKEN=\"$DO_TERRAFORM_AUTH_TOKEN\"" >terraform.tfvars
            echo "PIPELINE_SSHKEY=\"id_rsa.pub\"" >>terraform.tfvars
          working_directory: /tmp/workspace/terraform
      - run:
          name: Plan terraform deployment
          command: terraform plan
          working_directory: /tmp/workspace/terraform
      - run:
          name: Apply terraform deployment
          command: terraform apply -auto-approve
          working_directory: /tmp/workspace/terraform

  deploy_api:
    docker:
      - image: circleci/python:3.6.4
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "no"
      IMAGE_NAME: "nick96/demo-api"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install ansible
          command: |
            sudo pip install --upgrade pip 
            sudo pip install ansible==2.8.3
      - add_ssh_keys:
          fingerprints:
            - "cc:5a:d8:0a:4a:57:28:34:48:e7:5b:06:26:7e:36:2c"
      - run:
          name: Deploy API
          command: |
            ansible-playbook -v playbook.yml \
                 -v \
                 -i hosts \
                 -u root \
                 -e "api_image=$IMAGE_NAME" \
                 -e "letsencrypt_email=$LETS_ENCRYPT_EMAIL" \
                 -e "ansible_python_interpreter=/usr/bin/python3" \
                 -e "digitalocean_token=$DO_DNS_AUTH_TOKEN" \
                 -e "loggly_token=$LOGGLY_TOKEN" \
                 -e "loggly_domain=$LOGGLY_DOMAIN"
          working_directory: /tmp/workspace/playbook


  deploy_frontend:
    docker:
      - image: circleci/node:10.1.0
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install firebase-tools
          command: sudo npm install -g firebase-tools
      - run:
          name: Deploy frontend to firebase hosting
          command: sudo firebase deploy --project $FIREBASE_PROJECT --token=$FIREBASE_TOKEN
          working_directory: /tmp/workspace/frontend
      
workflows:
  version: 2
  build_test_deploy:
    jobs:
      # Build / test
      - test_terraform
      - test_playbook
      - build_test_api
      - build_test_frontend

      # Deploy
      - deploy_infra:
          requires:
            - build_test_api
            - test_terraform
            - test_playbook
      - deploy_api:
          requires: 
            - deploy_infra
      - deploy_frontend:
          requires:
            - build_test_frontend
            # Frontend deployment is dependent on the API deployment because we
            # don't want the frontend ahead of the API.
            - deploy_api
