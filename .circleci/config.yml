version: 2.1
jobs:
  build_test_api:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      IMAGE_NAME: "nick96/demo-api"
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum  "api/gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "api/build.gradle" }}
      - run:
          name: Run tests
          command: ./gradlew test
          working_directory: api/
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "api/gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "api/build.gradle" }}
      - store_test_results:
          path: api/build/test-results/test
      - store_artifacts:
          path: api/build/test-results/test
      - setup_remote_docker
      - run:
          name: Build docker image
          command: ./gradlew jibDockerBuild --image "$IMAGE_NAME"
          working_directory: api/
      - run:
          name: Tag docker image
          command: docker tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:${CIRCLE_SHA1}" 
      - run:
          name: Push docker image
          command: |
            echo "$DOCKERHUB_PSW" | docker login --username "$DOCKERHUB_USR" --password-stdin
            docker push "${IMAGE_NAME}:latest"
            docker push "${IMAGE_NAME}:${CIRCLE_SHA1}"
      - run: ls -R
      - persist_to_workspace:
          root: api
          paths:
            - playbook

  build_test_frontend:
    docker:
      - image: circleci/node:10.1.0 
    environment:
      CI: "1"
      IMAGE_NAME: "nick96/demo-api"
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Install dependencies and test
          command: yarn install --frozen-lockfile && yarn test
          working_directory: frontend/
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Production build
          command: yarn build
          working_directory: frontend/
      - persist_to_workspace:
          root: .
          paths:
            - frontend

  deploy_api:
    docker:
      - image: circleci/python:3.6.4
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "no"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install ansible
          command: |
            sudo pip install --upgrade pip 
            sudo pip install ansible==2.8.3
      - add_ssh_keys:
          fingerprints:
            - "cc:5a:d8:0a:4a:57:28:34:48:e7:5b:06:26:7e:36:2c"
      - run:
          name: Deploy API
          command: |
            ansible-playbook -v playbook.yml \
                 -v \
                 -i hosts \
                 -u root \
                 --extra-vars "api_image=$IMAGE_NAME email=$LETS_ENCRYPT_EMAIL ansible_python_interpreter=/usr/bin/python3"
          working_directory: /tmp/workspace/playbook


  deploy_frontend:
    docker:
      - image: circleci/node:10.1.0
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install firebase-tools
          command: sudo npm install -g firebase-tools
      - run:
          name: Deploy frontend to firebase hosting
          command: sudo firebase deploy --project $FIREBASE_PROJECT --token=$FIREBASE_TOKEN
          working_directory: /tmp/workspace/frontend
      
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_test_api
      - build_test_frontend
      - deploy_api:
          requires: 
            - build_test_api
      - deploy_frontend:
          requires:
            - build_test_frontend
